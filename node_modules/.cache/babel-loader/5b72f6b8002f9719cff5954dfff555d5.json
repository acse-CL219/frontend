{"remainingRequest":"/Users/liuzhaolun/WebstormProjects/Tencent/website/node_modules/babel-loader/lib/index.js!/Users/liuzhaolun/WebstormProjects/Tencent/website/node_modules/eslint-loader/index.js??ref--13-0!/Users/liuzhaolun/WebstormProjects/Tencent/website/src/api/http.js","dependencies":[{"path":"/Users/liuzhaolun/WebstormProjects/Tencent/website/src/api/http.js","mtime":1576552647000},{"path":"/Users/liuzhaolun/WebstormProjects/Tencent/website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhaolun/WebstormProjects/Tencent/website/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuzhaolun/WebstormProjects/Tencent/website/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwppbXBvcnQgUVMgZnJvbSAncXMnOwppbXBvcnQgeyByZXNvbHZlLCByZWplY3QgfSBmcm9tICdxJzsKaW1wb3J0IHJvdXRlciBmcm9tICcuLi9yb3V0ZXIuanMnOwppbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnZWxlbWVudC11aSc7IC8vIGF4aW9zIOWwgeijhe+8jCDlsIHoo4VnZXQscG9zdOivt+axggovL+iuvue9rmJhc2V1cmws5ZCO6Z2i55qE6K+35rGC6YO95Lya55So6L+Z5Liq5o6l6LW35p2lLOiuvue9ruS4uuWQjuerr+WcsOWdgAovLyBheGlvcy5kZWZhdWx0cy5iYXNlVVJMPSJodHRwOi8vMTI3LjAuMC4xOjUwMDAvIgovL2F4aW9zLmRlZmF1bHRzLmJhc2VVUkw9Ii8iCgpheGlvcy5kZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMgPSB0cnVlOyAvLyDorr7nva7otoXml7bml7bpl7QKCmF4aW9zLmRlZmF1bHRzLnRpbWVvdXQgPSAzMDAwOyAvL+m7mOiupOaYr+ihqOWNleagvOW8j++8jOeOsOWcqOaUueaIkGpzb24KCmF4aW9zLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQ29udGVudC1UeXBlJ10gPSAnQ29udGVudC1UeXBl77yaYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JzsgLy8gcmVzcG9uc2Ug5oum5oiq77yM5omA5pyJ55qE6K+35rGC5Zue5bqU6YO95Lya6YCa6L+H6L+Z6YeMCgpheGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIGNvbnNvbGUubG9nKCLor7fmsYLmi6bmiKo65oiQ5YqfIik7CiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtlbHNlIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7Cn0sIGZ1bmN0aW9uIChlcnIpIHsKICAvLyDlk43lupTlpLHotKXnmoQ1MDDnrYnpg73kvJrlnKjov5nph4wKICBjb25zb2xlLmxvZygi5oum5oiq5aSx6LSlIik7IC8vIOWvueS6juacieS6m+WTjeW6lOWksei0peeahCxyZXNwb25zZSDmmK/nqbrnmoTvvIznm7TmjqXlsIZtZXNzYWdl6L+U5ZueCgogIGlmIChlcnJbJ3Jlc3BvbnNlJ10gPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVyci5tZXNzYWdlKTsKICB9CgogIGNvbnNvbGUubG9nKGVyci5yZXNwb25zZSk7IC8vIOaciemUmeivr+eggeeahOivne+8jOebtOaOpeWIpOaWremUmeivr+eggQoKICBzd2l0Y2ggKGVyci5yZXNwb25zZS5zdGF0dXMpIHsKICAgIC8v5rKh5pyJ55m75b2VLOmHjeWumuWQkeWIsOeZu+W9leeVjOmdogogICAgY2FzZSA0MDE6CiAgICAgIE1lc3NhZ2UoewogICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgbWVzc2FnZTogIuayoeeZu+W9le+8jOmHjeWumuWQkeWIsOeZu+W9leeVjOmdoiIKICAgICAgfSk7CiAgICAgIGNvbnNvbGUubG9nKCItLS0tLS0tLS0tLS0t6YeN5a6a5ZCRLi4uLi4uLi4uLi4uLi4uLiIpOwogICAgICByb3V0ZXIucmVwbGFjZSh7CiAgICAgICAgbmFtZTogImxvZ2luIgogICAgICB9KTsKICAgICAgYnJlYWs7CgogICAgY2FzZSA0MDM6CiAgICAgIC8vIE1lc3NhZ2UoewogICAgICAvLyAgICAgdHlwZToiZXJyb3IiLAogICAgICAvLyAgICAgbWVzc2FnZToiNDAzIgogICAgICAvLyB9KQogICAgICBicmVhazsKICB9IC8vIGNvbnNvbGUubG9nKCLor7fmsYLmi6bmiKo66ZSZ6K+v55WM6Z2iIikKICAvLyBjb25zb2xlLmxvZyhlcnIpCiAgLy/or7fmsYLplJnor68gLOi/memHjOaYr+aKiuaVtOS4qmVycuWvueixoei/lOWbnu+8jOimgeiOt+WPlui/lOWbnueahOS/oeaBryxlcnIucmVzcG9uc2UKCgogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpOwp9KTsgLy9nZXTmlrnms5XlsIHoo4UKCmV4cG9ydCBmdW5jdGlvbiBnZXQodXJsLCBwYXJhbXMpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgYXhpb3MuZ2V0KHVybCwgewogICAgICBwYXJhbXM6IHBhcmFtcwogICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIHJlc29sdmUocmVzLmRhdGEpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9IC8vcG9zdOaWueazleWwgeijhQoKZXhwb3J0IGZ1bmN0aW9uIHBvc3QodXJsLCBwYXJhbXMsIGNvbmZpZykgewogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBheGlvcy5wb3N0KHVybCwgcGFyYW1zLCBjb25maWcpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICByZXNvbHZlKHJlcy5kYXRhKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfQ=="},{"version":3,"sources":["/Users/liuzhaolun/WebstormProjects/Tencent/website/src/api/http.js"],"names":["axios","QS","resolve","reject","router","Message","defaults","withCredentials","timeout","headers","post","interceptors","response","use","console","log","status","Promise","err","undefined","message","type","replace","name","get","url","params","then","res","data","catch","config"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport QS from 'qs'\nimport { resolve, reject } from 'q'\nimport router from '../router.js'\nimport { Message } from 'element-ui';\n// axios 封装， 封装get,post请求\n\n//设置baseurl,后面的请求都会用这个接起来,设置为后端地址\n// axios.defaults.baseURL=\"http://127.0.0.1:5000/\"\n//axios.defaults.baseURL=\"/\"\naxios.defaults.withCredentials = true\n// 设置超时时间\naxios.defaults.timeout = 3000;\n//默认是表单格式，现在改成json\naxios.defaults.headers.post['Content-Type'] = 'Content-Type：application/json;charset=UTF-8';\n\n\n// response 拦截，所有的请求回应都会通过这里\naxios.interceptors.response.use(response => {\n\n    console.log(\"请求拦截:成功\")\n\n    if (response.status === 200)\n        return Promise.resolve(response)\n    else\n        return Promise.reject(response)\n}, err => {\n    // 响应失败的500等都会在这里\n    console.log(\"拦截失败\")\n    // 对于有些响应失败的,response 是空的，直接将message返回\n    if (err['response'] === undefined) {\n        return Promise.reject(err.message)\n    }\n    console.log(err.response)\n    // 有错误码的话，直接判断错误码\n    switch (err.response.status) {\n        //没有登录,重定向到登录界面\n        case 401:\n            Message({\n                type: \"error\",\n                message: \"没登录，重定向到登录界面\"\n            })\n            console.log(\"-------------重定向................\")\n            router.replace({ name: \"login\" })\n            break\n        case 403:\n            // Message({\n            //     type:\"error\",\n            //     message:\"403\"\n            // })\n            break\n    }\n    // console.log(\"请求拦截:错误界面\")\n    // console.log(err)\n    //请求错误 ,这里是把整个err对象返回，要获取返回的信息,err.response\n    return Promise.reject(err)\n\n})\n//get方法封装\nexport function get(url, params) {\n\n    return new Promise((resolve, reject) => {\n        axios.get(url, {\n            params: params\n        }).then(res => { resolve(res.data) }).\n            catch(err => {\n                reject(err)\n            })\n    })\n}\n//post方法封装\nexport function post(url, params,config) {\n    return new Promise((resolve, reject) => {\n        axios.post(url, params,config).then(res => { resolve(res.data) }).catch(err => {\n            reject(err)\n        })\n    })\n}"]}]}